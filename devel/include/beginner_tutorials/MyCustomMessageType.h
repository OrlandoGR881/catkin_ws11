// Generated by gencpp from file beginner_tutorials/MyCustomMessageType.msg
// DO NOT EDIT!


#ifndef BEGINNER_TUTORIALS_MESSAGE_MYCUSTOMMESSAGETYPE_H
#define BEGINNER_TUTORIALS_MESSAGE_MYCUSTOMMESSAGETYPE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace beginner_tutorials
{
template <class ContainerAllocator>
struct MyCustomMessageType_
{
  typedef MyCustomMessageType_<ContainerAllocator> Type;

  MyCustomMessageType_()
    : isValid(false)
    , restartsRemaining(0)
    , encoderCounts(0)
    , distanceToStart(0.0)
    , distanceToEnd(0.0)
    , taskDescription()
    , distancesToOtherRobots()  {
    }
  MyCustomMessageType_(const ContainerAllocator& _alloc)
    : isValid(false)
    , restartsRemaining(0)
    , encoderCounts(0)
    , distanceToStart(0.0)
    , distanceToEnd(0.0)
    , taskDescription(_alloc)
    , distancesToOtherRobots(_alloc)  {
  (void)_alloc;
    }



   typedef uint8_t _isValid_type;
  _isValid_type isValid;

   typedef uint32_t _restartsRemaining_type;
  _restartsRemaining_type restartsRemaining;

   typedef int32_t _encoderCounts_type;
  _encoderCounts_type encoderCounts;

   typedef float _distanceToStart_type;
  _distanceToStart_type distanceToStart;

   typedef double _distanceToEnd_type;
  _distanceToEnd_type distanceToEnd;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _taskDescription_type;
  _taskDescription_type taskDescription;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _distancesToOtherRobots_type;
  _distancesToOtherRobots_type distancesToOtherRobots;





  typedef boost::shared_ptr< ::beginner_tutorials::MyCustomMessageType_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::beginner_tutorials::MyCustomMessageType_<ContainerAllocator> const> ConstPtr;

}; // struct MyCustomMessageType_

typedef ::beginner_tutorials::MyCustomMessageType_<std::allocator<void> > MyCustomMessageType;

typedef boost::shared_ptr< ::beginner_tutorials::MyCustomMessageType > MyCustomMessageTypePtr;
typedef boost::shared_ptr< ::beginner_tutorials::MyCustomMessageType const> MyCustomMessageTypeConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::beginner_tutorials::MyCustomMessageType_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::beginner_tutorials::MyCustomMessageType_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::beginner_tutorials::MyCustomMessageType_<ContainerAllocator1> & lhs, const ::beginner_tutorials::MyCustomMessageType_<ContainerAllocator2> & rhs)
{
  return lhs.isValid == rhs.isValid &&
    lhs.restartsRemaining == rhs.restartsRemaining &&
    lhs.encoderCounts == rhs.encoderCounts &&
    lhs.distanceToStart == rhs.distanceToStart &&
    lhs.distanceToEnd == rhs.distanceToEnd &&
    lhs.taskDescription == rhs.taskDescription &&
    lhs.distancesToOtherRobots == rhs.distancesToOtherRobots;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::beginner_tutorials::MyCustomMessageType_<ContainerAllocator1> & lhs, const ::beginner_tutorials::MyCustomMessageType_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace beginner_tutorials

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::beginner_tutorials::MyCustomMessageType_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::beginner_tutorials::MyCustomMessageType_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::beginner_tutorials::MyCustomMessageType_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::beginner_tutorials::MyCustomMessageType_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::beginner_tutorials::MyCustomMessageType_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::beginner_tutorials::MyCustomMessageType_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::beginner_tutorials::MyCustomMessageType_<ContainerAllocator> >
{
  static const char* value()
  {
    return "669304755248d0e6a47460f571ab5053";
  }

  static const char* value(const ::beginner_tutorials::MyCustomMessageType_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x669304755248d0e6ULL;
  static const uint64_t static_value2 = 0xa47460f571ab5053ULL;
};

template<class ContainerAllocator>
struct DataType< ::beginner_tutorials::MyCustomMessageType_<ContainerAllocator> >
{
  static const char* value()
  {
    return "beginner_tutorials/MyCustomMessageType";
  }

  static const char* value(const ::beginner_tutorials::MyCustomMessageType_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::beginner_tutorials::MyCustomMessageType_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool isValid\n"
"uint32 restartsRemaining\n"
"int32 encoderCounts\n"
"float32 distanceToStart\n"
"float64 distanceToEnd\n"
"string taskDescription\n"
"float64[] distancesToOtherRobots\n"
;
  }

  static const char* value(const ::beginner_tutorials::MyCustomMessageType_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::beginner_tutorials::MyCustomMessageType_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.isValid);
      stream.next(m.restartsRemaining);
      stream.next(m.encoderCounts);
      stream.next(m.distanceToStart);
      stream.next(m.distanceToEnd);
      stream.next(m.taskDescription);
      stream.next(m.distancesToOtherRobots);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MyCustomMessageType_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::beginner_tutorials::MyCustomMessageType_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::beginner_tutorials::MyCustomMessageType_<ContainerAllocator>& v)
  {
    s << indent << "isValid: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.isValid);
    s << indent << "restartsRemaining: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.restartsRemaining);
    s << indent << "encoderCounts: ";
    Printer<int32_t>::stream(s, indent + "  ", v.encoderCounts);
    s << indent << "distanceToStart: ";
    Printer<float>::stream(s, indent + "  ", v.distanceToStart);
    s << indent << "distanceToEnd: ";
    Printer<double>::stream(s, indent + "  ", v.distanceToEnd);
    s << indent << "taskDescription: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.taskDescription);
    s << indent << "distancesToOtherRobots[]" << std::endl;
    for (size_t i = 0; i < v.distancesToOtherRobots.size(); ++i)
    {
      s << indent << "  distancesToOtherRobots[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.distancesToOtherRobots[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // BEGINNER_TUTORIALS_MESSAGE_MYCUSTOMMESSAGETYPE_H
